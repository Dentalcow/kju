//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Diagnostics.CodeAnalysis;


namespace kju
{
    public partial class App : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
        private global::Kyoo.Kyoo_XamlTypeInfo.XamlMetaDataProvider __appProvider;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::Kyoo.Kyoo_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace Kyoo.Kyoo_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class XamlMetaDataProvider : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::Kyoo.Kyoo_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::Kyoo.Kyoo_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::Kyoo.Kyoo_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::Windows.Foundation.Metadata.DefaultOverload]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;
        
        private void InitTypeTables()
        {
            _typeNameTable = new string[39];
            _typeNameTable[0] = "Microsoft.UI.Xaml.Controls.XamlControlsResources";
            _typeNameTable[1] = "Microsoft.UI.Xaml.ResourceDictionary";
            _typeNameTable[2] = "Object";
            _typeNameTable[3] = "Boolean";
            _typeNameTable[4] = "WinUI.TableView.TableView";
            _typeNameTable[5] = "Microsoft.UI.Xaml.Controls.ListView";
            _typeNameTable[6] = "Microsoft.UI.Xaml.Controls.ItemsControl";
            _typeNameTable[7] = "System.Collections.IList";
            _typeNameTable[8] = "WinUI.TableView.TableViewColumnsCollection";
            _typeNameTable[9] = "System.Collections.ObjectModel.ObservableCollection`1<WinUI.TableView.TableViewColumn>";
            _typeNameTable[10] = "System.Collections.ObjectModel.Collection`1<WinUI.TableView.TableViewColumn>";
            _typeNameTable[11] = "WinUI.TableView.TableViewColumn";
            _typeNameTable[12] = "Microsoft.UI.Xaml.DependencyObject";
            _typeNameTable[13] = "Microsoft.UI.Xaml.GridLength";
            _typeNameTable[14] = "System.ValueType";
            _typeNameTable[15] = "System.Nullable`1<Double>";
            _typeNameTable[16] = "Double";
            _typeNameTable[17] = "Microsoft.UI.Xaml.Style";
            _typeNameTable[18] = "WinUI.TableView.TableViewColumnHeader";
            _typeNameTable[19] = "Microsoft.UI.Xaml.Controls.ContentControl";
            _typeNameTable[20] = "Microsoft.UI.Xaml.Visibility";
            _typeNameTable[21] = "CommunityToolkit.WinUI.Collections.IAdvancedCollectionView";
            _typeNameTable[22] = "Microsoft.UI.Xaml.Controls.ListViewSelectionMode";
            _typeNameTable[23] = "WinUI.TableView.TableViewSelectionUnit";
            _typeNameTable[24] = "System.Enum";
            _typeNameTable[25] = "WinUI.TableView.TableViewTextColumn";
            _typeNameTable[26] = "WinUI.TableView.TableViewBoundColumn";
            _typeNameTable[27] = "Microsoft.UI.Xaml.Data.Binding";
            _typeNameTable[28] = "WinUI.TableView.TableViewNumberColumn";
            _typeNameTable[29] = "kju.MainWindow";
            _typeNameTable[30] = "Microsoft.UI.Xaml.Window";
            _typeNameTable[31] = "System.Collections.ObjectModel.ObservableCollection`1<kju.AudioCue>";
            _typeNameTable[32] = "System.Collections.ObjectModel.Collection`1<kju.AudioCue>";
            _typeNameTable[33] = "kju.AudioCue";
            _typeNameTable[34] = "Int32";
            _typeNameTable[35] = "String";
            _typeNameTable[36] = "kju.ApplicationSettings";
            _typeNameTable[37] = "Microsoft.UI.Xaml.Controls.TreeViewNode";
            _typeNameTable[38] = "System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>";

            _typeTable = new global::System.Type[39];
            _typeTable[0] = typeof(global::Microsoft.UI.Xaml.Controls.XamlControlsResources);
            _typeTable[1] = typeof(global::Microsoft.UI.Xaml.ResourceDictionary);
            _typeTable[2] = typeof(global::System.Object);
            _typeTable[3] = typeof(global::System.Boolean);
            _typeTable[4] = typeof(global::WinUI.TableView.TableView);
            _typeTable[5] = typeof(global::Microsoft.UI.Xaml.Controls.ListView);
            _typeTable[6] = typeof(global::Microsoft.UI.Xaml.Controls.ItemsControl);
            _typeTable[7] = typeof(global::System.Collections.IList);
            _typeTable[8] = typeof(global::WinUI.TableView.TableViewColumnsCollection);
            _typeTable[9] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::WinUI.TableView.TableViewColumn>);
            _typeTable[10] = typeof(global::System.Collections.ObjectModel.Collection<global::WinUI.TableView.TableViewColumn>);
            _typeTable[11] = typeof(global::WinUI.TableView.TableViewColumn);
            _typeTable[12] = typeof(global::Microsoft.UI.Xaml.DependencyObject);
            _typeTable[13] = typeof(global::Microsoft.UI.Xaml.GridLength);
            _typeTable[14] = typeof(global::System.ValueType);
            _typeTable[15] = typeof(global::System.Nullable<global::System.Double>);
            _typeTable[16] = typeof(global::System.Double);
            _typeTable[17] = typeof(global::Microsoft.UI.Xaml.Style);
            _typeTable[18] = typeof(global::WinUI.TableView.TableViewColumnHeader);
            _typeTable[19] = typeof(global::Microsoft.UI.Xaml.Controls.ContentControl);
            _typeTable[20] = typeof(global::Microsoft.UI.Xaml.Visibility);
            _typeTable[21] = typeof(global::CommunityToolkit.WinUI.Collections.IAdvancedCollectionView);
            _typeTable[22] = typeof(global::Microsoft.UI.Xaml.Controls.ListViewSelectionMode);
            _typeTable[23] = typeof(global::WinUI.TableView.TableViewSelectionUnit);
            _typeTable[24] = typeof(global::System.Enum);
            _typeTable[25] = typeof(global::WinUI.TableView.TableViewTextColumn);
            _typeTable[26] = typeof(global::WinUI.TableView.TableViewBoundColumn);
            _typeTable[27] = typeof(global::Microsoft.UI.Xaml.Data.Binding);
            _typeTable[28] = typeof(global::WinUI.TableView.TableViewNumberColumn);
            _typeTable[29] = typeof(global::kju.MainWindow);
            _typeTable[30] = typeof(global::Microsoft.UI.Xaml.Window);
            _typeTable[31] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::kju.AudioCue>);
            _typeTable[32] = typeof(global::System.Collections.ObjectModel.Collection<global::kju.AudioCue>);
            _typeTable[33] = typeof(global::kju.AudioCue);
            _typeTable[34] = typeof(global::System.Int32);
            _typeTable[35] = typeof(global::System.String);
            _typeTable[36] = typeof(global::kju.ApplicationSettings);
            _typeTable[37] = typeof(global::Microsoft.UI.Xaml.Controls.TreeViewNode);
            _typeTable[38] = typeof(global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Controls.TreeViewNode>);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_XamlControlsResources() { return new global::Microsoft.UI.Xaml.Controls.XamlControlsResources(); }
        private object Activate_4_TableView() { return new global::WinUI.TableView.TableView(); }
        private object Activate_8_TableViewColumnsCollection() { return new global::WinUI.TableView.TableViewColumnsCollection(); }
        private object Activate_9_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::WinUI.TableView.TableViewColumn>(); }
        private object Activate_10_Collection() { return new global::System.Collections.ObjectModel.Collection<global::WinUI.TableView.TableViewColumn>(); }
        private object Activate_18_TableViewColumnHeader() { return new global::WinUI.TableView.TableViewColumnHeader(); }
        private object Activate_25_TableViewTextColumn() { return new global::WinUI.TableView.TableViewTextColumn(); }
        private object Activate_28_TableViewNumberColumn() { return new global::WinUI.TableView.TableViewNumberColumn(); }
        private object Activate_29_MainWindow() { return new global::kju.MainWindow(); }
        private object Activate_31_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::kju.AudioCue>(); }
        private object Activate_32_Collection() { return new global::System.Collections.ObjectModel.Collection<global::kju.AudioCue>(); }
        private object Activate_33_AudioCue() { return new global::kju.AudioCue(); }
        private object Activate_36_ApplicationSettings() { return new global::kju.ApplicationSettings(); }
        private object Activate_37_TreeViewNode() { return new global::Microsoft.UI.Xaml.Controls.TreeViewNode(); }
        private void StaticInitializer_0_XamlControlsResources() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.XamlControlsResources).TypeHandle);
        private void StaticInitializer_4_TableView() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::WinUI.TableView.TableView).TypeHandle);
        private void StaticInitializer_7_IList() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Collections.IList).TypeHandle);
        private void StaticInitializer_8_TableViewColumnsCollection() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::WinUI.TableView.TableViewColumnsCollection).TypeHandle);
        private void StaticInitializer_9_ObservableCollection() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::WinUI.TableView.TableViewColumn>).TypeHandle);
        private void StaticInitializer_10_Collection() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Collections.ObjectModel.Collection<global::WinUI.TableView.TableViewColumn>).TypeHandle);
        private void StaticInitializer_11_TableViewColumn() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::WinUI.TableView.TableViewColumn).TypeHandle);
        private void StaticInitializer_13_GridLength() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.GridLength).TypeHandle);
        private void StaticInitializer_14_ValueType() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.ValueType).TypeHandle);
        private void StaticInitializer_15_Nullable() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Nullable<global::System.Double>).TypeHandle);
        private void StaticInitializer_18_TableViewColumnHeader() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::WinUI.TableView.TableViewColumnHeader).TypeHandle);
        private void StaticInitializer_21_IAdvancedCollectionView() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::CommunityToolkit.WinUI.Collections.IAdvancedCollectionView).TypeHandle);
        private void StaticInitializer_23_TableViewSelectionUnit() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::WinUI.TableView.TableViewSelectionUnit).TypeHandle);
        private void StaticInitializer_24_Enum() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Enum).TypeHandle);
        private void StaticInitializer_25_TableViewTextColumn() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::WinUI.TableView.TableViewTextColumn).TypeHandle);
        private void StaticInitializer_26_TableViewBoundColumn() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::WinUI.TableView.TableViewBoundColumn).TypeHandle);
        private void StaticInitializer_28_TableViewNumberColumn() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::WinUI.TableView.TableViewNumberColumn).TypeHandle);
        private void StaticInitializer_29_MainWindow() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::kju.MainWindow).TypeHandle);
        private void StaticInitializer_31_ObservableCollection() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::kju.AudioCue>).TypeHandle);
        private void StaticInitializer_32_Collection() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Collections.ObjectModel.Collection<global::kju.AudioCue>).TypeHandle);
        private void StaticInitializer_33_AudioCue() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::kju.AudioCue).TypeHandle);
        private void StaticInitializer_36_ApplicationSettings() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::kju.ApplicationSettings).TypeHandle);
        private void StaticInitializer_37_TreeViewNode() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::Microsoft.UI.Xaml.Controls.TreeViewNode).TypeHandle);
        private void StaticInitializer_38_IList() => global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeof(global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Controls.TreeViewNode>).TypeHandle);
        private void MapAdd_0_XamlControlsResources(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.Object, global::System.Object>)instance;
            var newKey = (global::System.Object)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_8_TableViewColumnsCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::WinUI.TableView.TableViewColumn>)instance;
            var newItem = (global::WinUI.TableView.TableViewColumn)item;
            collection.Add(newItem);
        }
        private void VectorAdd_9_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::WinUI.TableView.TableViewColumn>)instance;
            var newItem = (global::WinUI.TableView.TableViewColumn)item;
            collection.Add(newItem);
        }
        private void VectorAdd_10_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::WinUI.TableView.TableViewColumn>)instance;
            var newItem = (global::WinUI.TableView.TableViewColumn)item;
            collection.Add(newItem);
        }
        private void VectorAdd_21_IAdvancedCollectionView(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }
        private void VectorAdd_31_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::kju.AudioCue>)instance;
            var newItem = (global::kju.AudioCue)item;
            collection.Add(newItem);
        }
        private void VectorAdd_32_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::kju.AudioCue>)instance;
            var newItem = (global::kju.AudioCue)item;
            collection.Add(newItem);
        }
        private void VectorAdd_38_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.UI.Xaml.Controls.TreeViewNode>)instance;
            var newItem = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)item;
            collection.Add(newItem);
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Kyoo.Kyoo_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Microsoft.UI.Xaml.Controls.XamlControlsResources
                userType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.ResourceDictionary"));
                userType.Activator = Activate_0_XamlControlsResources;
                userType.StaticInitializer = StaticInitializer_0_XamlControlsResources;
                userType.DictionaryAdd = MapAdd_0_XamlControlsResources;
                userType.AddMemberName("UseCompactResources");
                xamlType = userType;
                break;

            case 1:   //  Microsoft.UI.Xaml.ResourceDictionary
                xamlType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Object
                xamlType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Boolean
                xamlType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  WinUI.TableView.TableView
                userType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ListView"));
                userType.Activator = Activate_4_TableView;
                userType.StaticInitializer = StaticInitializer_4_TableView;
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("AutoGenerateColumns");
                userType.AddMemberName("Columns");
                userType.AddMemberName("CollectionView");
                userType.AddMemberName("HeaderRowHeight");
                userType.AddMemberName("RowHeight");
                userType.AddMemberName("RowMaxHeight");
                userType.AddMemberName("SelectionMode");
                userType.AddMemberName("ShowExportOptions");
                userType.AddMemberName("IsReadOnly");
                userType.AddMemberName("ShowOptionsButton");
                userType.AddMemberName("CanResizeColumns");
                userType.AddMemberName("CanSortColumns");
                userType.AddMemberName("CanFilterColumns");
                userType.AddMemberName("MinColumnWidth");
                userType.AddMemberName("MaxColumnWidth");
                userType.AddMemberName("SelectionUnit");
                xamlType = userType;
                break;

            case 5:   //  Microsoft.UI.Xaml.Controls.ListView
                xamlType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Microsoft.UI.Xaml.Controls.ItemsControl
                xamlType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  System.Collections.IList
                userType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.StaticInitializer = StaticInitializer_7_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 8:   //  WinUI.TableView.TableViewColumnsCollection
                userType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.ObservableCollection`1<WinUI.TableView.TableViewColumn>"));
                userType.StaticInitializer = StaticInitializer_8_TableViewColumnsCollection;
                userType.CollectionAdd = VectorAdd_8_TableViewColumnsCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 9:   //  System.Collections.ObjectModel.ObservableCollection`1<WinUI.TableView.TableViewColumn>
                userType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<WinUI.TableView.TableViewColumn>"));
                userType.Activator = Activate_9_ObservableCollection;
                userType.StaticInitializer = StaticInitializer_9_ObservableCollection;
                userType.CollectionAdd = VectorAdd_9_ObservableCollection;
                xamlType = userType;
                break;

            case 10:   //  System.Collections.ObjectModel.Collection`1<WinUI.TableView.TableViewColumn>
                userType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_10_Collection;
                userType.StaticInitializer = StaticInitializer_10_Collection;
                userType.CollectionAdd = VectorAdd_10_Collection;
                xamlType = userType;
                break;

            case 11:   //  WinUI.TableView.TableViewColumn
                userType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.StaticInitializer = StaticInitializer_11_TableViewColumn;
                userType.AddMemberName("Header");
                userType.AddMemberName("Width");
                userType.AddMemberName("MinWidth");
                userType.AddMemberName("MaxWidth");
                userType.AddMemberName("ActualWidth");
                userType.AddMemberName("CanResize");
                userType.AddMemberName("IsReadOnly");
                userType.AddMemberName("HeaderStyle");
                userType.AddMemberName("HeaderControl");
                userType.AddMemberName("Visibility");
                userType.AddMemberName("IsAutoGenerated");
                userType.AddMemberName("UseSingleElement");
                xamlType = userType;
                break;

            case 12:   //  Microsoft.UI.Xaml.DependencyObject
                xamlType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 13:   //  Microsoft.UI.Xaml.GridLength
                userType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.StaticInitializer = StaticInitializer_13_GridLength;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 14:   //  System.ValueType
                userType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.StaticInitializer = StaticInitializer_14_ValueType;
                xamlType = userType;
                break;

            case 15:   //  System.Nullable`1<Double>
                userType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetBoxedType(GetXamlTypeByName("Double"));
                userType.BoxInstance = userType.BoxType<global::System.Double>;
                userType.StaticInitializer = StaticInitializer_15_Nullable;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 16:   //  Double
                xamlType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  Microsoft.UI.Xaml.Style
                xamlType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  WinUI.TableView.TableViewColumnHeader
                userType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.StaticInitializer = StaticInitializer_18_TableViewColumnHeader;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 19:   //  Microsoft.UI.Xaml.Controls.ContentControl
                xamlType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 20:   //  Microsoft.UI.Xaml.Visibility
                xamlType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 21:   //  CommunityToolkit.WinUI.Collections.IAdvancedCollectionView
                userType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.StaticInitializer = StaticInitializer_21_IAdvancedCollectionView;
                userType.CollectionAdd = VectorAdd_21_IAdvancedCollectionView;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 22:   //  Microsoft.UI.Xaml.Controls.ListViewSelectionMode
                xamlType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 23:   //  WinUI.TableView.TableViewSelectionUnit
                userType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.StaticInitializer = StaticInitializer_23_TableViewSelectionUnit;
                userType.AddEnumValue("CellOrRow", global::WinUI.TableView.TableViewSelectionUnit.CellOrRow);
                userType.AddEnumValue("Cell", global::WinUI.TableView.TableViewSelectionUnit.Cell);
                userType.AddEnumValue("Row", global::WinUI.TableView.TableViewSelectionUnit.Row);
                xamlType = userType;
                break;

            case 24:   //  System.Enum
                userType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.StaticInitializer = StaticInitializer_24_Enum;
                xamlType = userType;
                break;

            case 25:   //  WinUI.TableView.TableViewTextColumn
                userType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("WinUI.TableView.TableViewBoundColumn"));
                userType.Activator = Activate_25_TableViewTextColumn;
                userType.StaticInitializer = StaticInitializer_25_TableViewTextColumn;
                xamlType = userType;
                break;

            case 26:   //  WinUI.TableView.TableViewBoundColumn
                userType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("WinUI.TableView.TableViewColumn"));
                userType.StaticInitializer = StaticInitializer_26_TableViewBoundColumn;
                userType.AddMemberName("Binding");
                userType.AddMemberName("CanSort");
                userType.AddMemberName("CanFilter");
                xamlType = userType;
                break;

            case 27:   //  Microsoft.UI.Xaml.Data.Binding
                xamlType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 28:   //  WinUI.TableView.TableViewNumberColumn
                userType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("WinUI.TableView.TableViewBoundColumn"));
                userType.Activator = Activate_28_TableViewNumberColumn;
                userType.StaticInitializer = StaticInitializer_28_TableViewNumberColumn;
                xamlType = userType;
                break;

            case 29:   //  kju.MainWindow
                userType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Window"));
                userType.Activator = Activate_29_MainWindow;
                userType.StaticInitializer = StaticInitializer_29_MainWindow;
                userType.AddMemberName("Cues");
                userType.AddMemberName("AppSettings");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  Microsoft.UI.Xaml.Window
                xamlType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 31:   //  System.Collections.ObjectModel.ObservableCollection`1<kju.AudioCue>
                userType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<kju.AudioCue>"));
                userType.StaticInitializer = StaticInitializer_31_ObservableCollection;
                userType.CollectionAdd = VectorAdd_31_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 32:   //  System.Collections.ObjectModel.Collection`1<kju.AudioCue>
                userType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_32_Collection;
                userType.StaticInitializer = StaticInitializer_32_Collection;
                userType.CollectionAdd = VectorAdd_32_Collection;
                xamlType = userType;
                break;

            case 33:   //  kju.AudioCue
                userType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_33_AudioCue;
                userType.StaticInitializer = StaticInitializer_33_AudioCue;
                userType.AddMemberName("CueNumber");
                userType.AddMemberName("Type");
                userType.AddMemberName("Name");
                userType.AddMemberName("FilePath");
                userType.AddMemberName("Duration");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 34:   //  Int32
                xamlType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 35:   //  String
                xamlType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 36:   //  kju.ApplicationSettings
                userType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.StaticInitializer = StaticInitializer_36_ApplicationSettings;
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 37:   //  Microsoft.UI.Xaml.Controls.TreeViewNode
                userType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_37_TreeViewNode;
                userType.StaticInitializer = StaticInitializer_37_TreeViewNode;
                userType.AddMemberName("Children");
                userType.AddMemberName("Content");
                userType.AddMemberName("Depth");
                userType.AddMemberName("HasChildren");
                userType.AddMemberName("HasUnrealizedChildren");
                userType.AddMemberName("IsExpanded");
                userType.AddMemberName("Parent");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 38:   //  System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>
                userType = new global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.StaticInitializer = StaticInitializer_38_IList;
                userType.CollectionAdd = VectorAdd_38_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::Microsoft.UI.Xaml.XamlTypeInfo.XamlControlsXamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::WinUI.TableView.WinUI_TableView_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_XamlControlsResources_UseCompactResources(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            return that.UseCompactResources;
        }
        private void set_0_XamlControlsResources_UseCompactResources(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            that.UseCompactResources = (global::System.Boolean)Value;
        }
        private object get_1_TableView_ItemsSource(object instance)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            return that.ItemsSource;
        }
        private void set_1_TableView_ItemsSource(object instance, object Value)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            that.ItemsSource = (global::System.Collections.IList)Value;
        }
        private object get_2_TableView_AutoGenerateColumns(object instance)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            return that.AutoGenerateColumns;
        }
        private void set_2_TableView_AutoGenerateColumns(object instance, object Value)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            that.AutoGenerateColumns = (global::System.Boolean)Value;
        }
        private object get_3_TableView_Columns(object instance)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            return that.Columns;
        }
        private object get_4_TableViewColumn_Header(object instance)
        {
            var that = (global::WinUI.TableView.TableViewColumn)instance;
            return that.Header;
        }
        private void set_4_TableViewColumn_Header(object instance, object Value)
        {
            var that = (global::WinUI.TableView.TableViewColumn)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_5_TableViewColumn_Width(object instance)
        {
            var that = (global::WinUI.TableView.TableViewColumn)instance;
            return that.Width;
        }
        private void set_5_TableViewColumn_Width(object instance, object Value)
        {
            var that = (global::WinUI.TableView.TableViewColumn)instance;
            that.Width = (global::Microsoft.UI.Xaml.GridLength)Value;
        }
        private object get_6_TableViewColumn_MinWidth(object instance)
        {
            var that = (global::WinUI.TableView.TableViewColumn)instance;
            return that.MinWidth;
        }
        private void set_6_TableViewColumn_MinWidth(object instance, object Value)
        {
            var that = (global::WinUI.TableView.TableViewColumn)instance;
            that.MinWidth = (global::System.Nullable<global::System.Double>)Value;
        }
        private object get_7_TableViewColumn_MaxWidth(object instance)
        {
            var that = (global::WinUI.TableView.TableViewColumn)instance;
            return that.MaxWidth;
        }
        private void set_7_TableViewColumn_MaxWidth(object instance, object Value)
        {
            var that = (global::WinUI.TableView.TableViewColumn)instance;
            that.MaxWidth = (global::System.Nullable<global::System.Double>)Value;
        }
        private object get_8_TableViewColumn_ActualWidth(object instance)
        {
            var that = (global::WinUI.TableView.TableViewColumn)instance;
            return that.ActualWidth;
        }
        private void set_8_TableViewColumn_ActualWidth(object instance, object Value)
        {
            var that = (global::WinUI.TableView.TableViewColumn)instance;
            that.ActualWidth = (global::System.Double)Value;
        }
        private object get_9_TableViewColumn_CanResize(object instance)
        {
            var that = (global::WinUI.TableView.TableViewColumn)instance;
            return that.CanResize;
        }
        private void set_9_TableViewColumn_CanResize(object instance, object Value)
        {
            var that = (global::WinUI.TableView.TableViewColumn)instance;
            that.CanResize = (global::System.Boolean)Value;
        }
        private object get_10_TableViewColumn_IsReadOnly(object instance)
        {
            var that = (global::WinUI.TableView.TableViewColumn)instance;
            return that.IsReadOnly;
        }
        private void set_10_TableViewColumn_IsReadOnly(object instance, object Value)
        {
            var that = (global::WinUI.TableView.TableViewColumn)instance;
            that.IsReadOnly = (global::System.Boolean)Value;
        }
        private object get_11_TableViewColumn_HeaderStyle(object instance)
        {
            var that = (global::WinUI.TableView.TableViewColumn)instance;
            return that.HeaderStyle;
        }
        private void set_11_TableViewColumn_HeaderStyle(object instance, object Value)
        {
            var that = (global::WinUI.TableView.TableViewColumn)instance;
            that.HeaderStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_12_TableViewColumn_HeaderControl(object instance)
        {
            var that = (global::WinUI.TableView.TableViewColumn)instance;
            return that.HeaderControl;
        }
        private object get_13_TableViewColumn_Visibility(object instance)
        {
            var that = (global::WinUI.TableView.TableViewColumn)instance;
            return that.Visibility;
        }
        private void set_13_TableViewColumn_Visibility(object instance, object Value)
        {
            var that = (global::WinUI.TableView.TableViewColumn)instance;
            that.Visibility = (global::Microsoft.UI.Xaml.Visibility)Value;
        }
        private object get_14_TableViewColumn_IsAutoGenerated(object instance)
        {
            var that = (global::WinUI.TableView.TableViewColumn)instance;
            return that.IsAutoGenerated;
        }
        private object get_15_TableViewColumn_UseSingleElement(object instance)
        {
            var that = (global::WinUI.TableView.TableViewColumn)instance;
            return that.UseSingleElement;
        }
        private void set_15_TableViewColumn_UseSingleElement(object instance, object Value)
        {
            var that = (global::WinUI.TableView.TableViewColumn)instance;
            that.UseSingleElement = (global::System.Boolean)Value;
        }
        private object get_16_TableView_CollectionView(object instance)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            return that.CollectionView;
        }
        private object get_17_TableView_HeaderRowHeight(object instance)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            return that.HeaderRowHeight;
        }
        private void set_17_TableView_HeaderRowHeight(object instance, object Value)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            that.HeaderRowHeight = (global::System.Double)Value;
        }
        private object get_18_TableView_RowHeight(object instance)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            return that.RowHeight;
        }
        private void set_18_TableView_RowHeight(object instance, object Value)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            that.RowHeight = (global::System.Double)Value;
        }
        private object get_19_TableView_RowMaxHeight(object instance)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            return that.RowMaxHeight;
        }
        private void set_19_TableView_RowMaxHeight(object instance, object Value)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            that.RowMaxHeight = (global::System.Double)Value;
        }
        private object get_20_TableView_SelectionMode(object instance)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            return that.SelectionMode;
        }
        private void set_20_TableView_SelectionMode(object instance, object Value)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            that.SelectionMode = (global::Microsoft.UI.Xaml.Controls.ListViewSelectionMode)Value;
        }
        private object get_21_TableView_ShowExportOptions(object instance)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            return that.ShowExportOptions;
        }
        private void set_21_TableView_ShowExportOptions(object instance, object Value)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            that.ShowExportOptions = (global::System.Boolean)Value;
        }
        private object get_22_TableView_IsReadOnly(object instance)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            return that.IsReadOnly;
        }
        private void set_22_TableView_IsReadOnly(object instance, object Value)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            that.IsReadOnly = (global::System.Boolean)Value;
        }
        private object get_23_TableView_ShowOptionsButton(object instance)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            return that.ShowOptionsButton;
        }
        private void set_23_TableView_ShowOptionsButton(object instance, object Value)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            that.ShowOptionsButton = (global::System.Boolean)Value;
        }
        private object get_24_TableView_CanResizeColumns(object instance)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            return that.CanResizeColumns;
        }
        private void set_24_TableView_CanResizeColumns(object instance, object Value)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            that.CanResizeColumns = (global::System.Boolean)Value;
        }
        private object get_25_TableView_CanSortColumns(object instance)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            return that.CanSortColumns;
        }
        private void set_25_TableView_CanSortColumns(object instance, object Value)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            that.CanSortColumns = (global::System.Boolean)Value;
        }
        private object get_26_TableView_CanFilterColumns(object instance)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            return that.CanFilterColumns;
        }
        private void set_26_TableView_CanFilterColumns(object instance, object Value)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            that.CanFilterColumns = (global::System.Boolean)Value;
        }
        private object get_27_TableView_MinColumnWidth(object instance)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            return that.MinColumnWidth;
        }
        private void set_27_TableView_MinColumnWidth(object instance, object Value)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            that.MinColumnWidth = (global::System.Double)Value;
        }
        private object get_28_TableView_MaxColumnWidth(object instance)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            return that.MaxColumnWidth;
        }
        private void set_28_TableView_MaxColumnWidth(object instance, object Value)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            that.MaxColumnWidth = (global::System.Double)Value;
        }
        private object get_29_TableView_SelectionUnit(object instance)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            return that.SelectionUnit;
        }
        private void set_29_TableView_SelectionUnit(object instance, object Value)
        {
            var that = (global::WinUI.TableView.TableView)instance;
            that.SelectionUnit = (global::WinUI.TableView.TableViewSelectionUnit)Value;
        }
        private object get_30_TableViewBoundColumn_Binding(object instance)
        {
            var that = (global::WinUI.TableView.TableViewBoundColumn)instance;
            return that.Binding;
        }
        private void set_30_TableViewBoundColumn_Binding(object instance, object Value)
        {
            var that = (global::WinUI.TableView.TableViewBoundColumn)instance;
            that.Binding = (global::Microsoft.UI.Xaml.Data.Binding)Value;
        }
        private object get_31_TableViewBoundColumn_CanSort(object instance)
        {
            var that = (global::WinUI.TableView.TableViewBoundColumn)instance;
            return that.CanSort;
        }
        private void set_31_TableViewBoundColumn_CanSort(object instance, object Value)
        {
            var that = (global::WinUI.TableView.TableViewBoundColumn)instance;
            that.CanSort = (global::System.Boolean)Value;
        }
        private object get_32_TableViewBoundColumn_CanFilter(object instance)
        {
            var that = (global::WinUI.TableView.TableViewBoundColumn)instance;
            return that.CanFilter;
        }
        private void set_32_TableViewBoundColumn_CanFilter(object instance, object Value)
        {
            var that = (global::WinUI.TableView.TableViewBoundColumn)instance;
            that.CanFilter = (global::System.Boolean)Value;
        }
        private object get_33_MainWindow_Cues(object instance)
        {
            var that = (global::kju.MainWindow)instance;
            return that.Cues;
        }
        private object get_34_AudioCue_CueNumber(object instance)
        {
            var that = (global::kju.AudioCue)instance;
            return that.CueNumber;
        }
        private void set_34_AudioCue_CueNumber(object instance, object Value)
        {
            var that = (global::kju.AudioCue)instance;
            that.CueNumber = (global::System.Int32)Value;
        }
        private object get_35_AudioCue_Type(object instance)
        {
            var that = (global::kju.AudioCue)instance;
            return that.Type;
        }
        private void set_35_AudioCue_Type(object instance, object Value)
        {
            var that = (global::kju.AudioCue)instance;
            that.Type = (global::System.String)Value;
        }
        private object get_36_AudioCue_Name(object instance)
        {
            var that = (global::kju.AudioCue)instance;
            return that.Name;
        }
        private void set_36_AudioCue_Name(object instance, object Value)
        {
            var that = (global::kju.AudioCue)instance;
            that.Name = (global::System.String)Value;
        }
        private object get_37_AudioCue_FilePath(object instance)
        {
            var that = (global::kju.AudioCue)instance;
            return that.FilePath;
        }
        private void set_37_AudioCue_FilePath(object instance, object Value)
        {
            var that = (global::kju.AudioCue)instance;
            that.FilePath = (global::System.String)Value;
        }
        private object get_38_AudioCue_Duration(object instance)
        {
            var that = (global::kju.AudioCue)instance;
            return that.Duration;
        }
        private void set_38_AudioCue_Duration(object instance, object Value)
        {
            var that = (global::kju.AudioCue)instance;
            that.Duration = (global::System.Double)Value;
        }
        private object get_39_MainWindow_AppSettings(object instance)
        {
            var that = (global::kju.MainWindow)instance;
            return that.AppSettings;
        }
        private object get_40_TreeViewNode_Children(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Children;
        }
        private object get_41_TreeViewNode_Content(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Content;
        }
        private void set_41_TreeViewNode_Content(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.Content = (global::System.Object)Value;
        }
        private object get_42_TreeViewNode_Depth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Depth;
        }
        private object get_43_TreeViewNode_HasChildren(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.HasChildren;
        }
        private object get_44_TreeViewNode_HasUnrealizedChildren(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.HasUnrealizedChildren;
        }
        private void set_44_TreeViewNode_HasUnrealizedChildren(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.HasUnrealizedChildren = (global::System.Boolean)Value;
        }
        private object get_45_TreeViewNode_IsExpanded(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.IsExpanded;
        }
        private void set_45_TreeViewNode_IsExpanded(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_46_TreeViewNode_Parent(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Parent;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Kyoo.Kyoo_XamlTypeInfo.XamlMember xamlMember = null;
            global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Microsoft.UI.Xaml.Controls.XamlControlsResources.UseCompactResources":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.XamlControlsResources");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "UseCompactResources", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_XamlControlsResources_UseCompactResources;
                xamlMember.Setter = set_0_XamlControlsResources_UseCompactResources;
                break;
            case "WinUI.TableView.TableView.ItemsSource":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableView");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "ItemsSource", "System.Collections.IList");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_TableView_ItemsSource;
                xamlMember.Setter = set_1_TableView_ItemsSource;
                break;
            case "WinUI.TableView.TableView.AutoGenerateColumns":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableView");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "AutoGenerateColumns", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_TableView_AutoGenerateColumns;
                xamlMember.Setter = set_2_TableView_AutoGenerateColumns;
                break;
            case "WinUI.TableView.TableView.Columns":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableView");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "Columns", "WinUI.TableView.TableViewColumnsCollection");
                xamlMember.Getter = get_3_TableView_Columns;
                xamlMember.SetIsReadOnly();
                break;
            case "WinUI.TableView.TableViewColumn.Header":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableViewColumn");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_TableViewColumn_Header;
                xamlMember.Setter = set_4_TableViewColumn_Header;
                break;
            case "WinUI.TableView.TableViewColumn.Width":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableViewColumn");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "Width", "Microsoft.UI.Xaml.GridLength");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_5_TableViewColumn_Width;
                xamlMember.Setter = set_5_TableViewColumn_Width;
                break;
            case "WinUI.TableView.TableViewColumn.MinWidth":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableViewColumn");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "MinWidth", "System.Nullable`1<Double>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_TableViewColumn_MinWidth;
                xamlMember.Setter = set_6_TableViewColumn_MinWidth;
                break;
            case "WinUI.TableView.TableViewColumn.MaxWidth":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableViewColumn");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "MaxWidth", "System.Nullable`1<Double>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_TableViewColumn_MaxWidth;
                xamlMember.Setter = set_7_TableViewColumn_MaxWidth;
                break;
            case "WinUI.TableView.TableViewColumn.ActualWidth":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableViewColumn");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "ActualWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_TableViewColumn_ActualWidth;
                xamlMember.Setter = set_8_TableViewColumn_ActualWidth;
                break;
            case "WinUI.TableView.TableViewColumn.CanResize":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableViewColumn");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "CanResize", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_TableViewColumn_CanResize;
                xamlMember.Setter = set_9_TableViewColumn_CanResize;
                break;
            case "WinUI.TableView.TableViewColumn.IsReadOnly":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableViewColumn");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "IsReadOnly", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_TableViewColumn_IsReadOnly;
                xamlMember.Setter = set_10_TableViewColumn_IsReadOnly;
                break;
            case "WinUI.TableView.TableViewColumn.HeaderStyle":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableViewColumn");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "HeaderStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_TableViewColumn_HeaderStyle;
                xamlMember.Setter = set_11_TableViewColumn_HeaderStyle;
                break;
            case "WinUI.TableView.TableViewColumn.HeaderControl":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableViewColumn");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "HeaderControl", "WinUI.TableView.TableViewColumnHeader");
                xamlMember.Getter = get_12_TableViewColumn_HeaderControl;
                xamlMember.SetIsReadOnly();
                break;
            case "WinUI.TableView.TableViewColumn.Visibility":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableViewColumn");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "Visibility", "Microsoft.UI.Xaml.Visibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_TableViewColumn_Visibility;
                xamlMember.Setter = set_13_TableViewColumn_Visibility;
                break;
            case "WinUI.TableView.TableViewColumn.IsAutoGenerated":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableViewColumn");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "IsAutoGenerated", "Boolean");
                xamlMember.Getter = get_14_TableViewColumn_IsAutoGenerated;
                xamlMember.SetIsReadOnly();
                break;
            case "WinUI.TableView.TableViewColumn.UseSingleElement":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableViewColumn");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "UseSingleElement", "Boolean");
                xamlMember.Getter = get_15_TableViewColumn_UseSingleElement;
                xamlMember.Setter = set_15_TableViewColumn_UseSingleElement;
                break;
            case "WinUI.TableView.TableView.CollectionView":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableView");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "CollectionView", "CommunityToolkit.WinUI.Collections.IAdvancedCollectionView");
                xamlMember.Getter = get_16_TableView_CollectionView;
                xamlMember.SetIsReadOnly();
                break;
            case "WinUI.TableView.TableView.HeaderRowHeight":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableView");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "HeaderRowHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_TableView_HeaderRowHeight;
                xamlMember.Setter = set_17_TableView_HeaderRowHeight;
                break;
            case "WinUI.TableView.TableView.RowHeight":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableView");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "RowHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_TableView_RowHeight;
                xamlMember.Setter = set_18_TableView_RowHeight;
                break;
            case "WinUI.TableView.TableView.RowMaxHeight":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableView");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "RowMaxHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_TableView_RowMaxHeight;
                xamlMember.Setter = set_19_TableView_RowMaxHeight;
                break;
            case "WinUI.TableView.TableView.SelectionMode":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableView");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "SelectionMode", "Microsoft.UI.Xaml.Controls.ListViewSelectionMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_TableView_SelectionMode;
                xamlMember.Setter = set_20_TableView_SelectionMode;
                break;
            case "WinUI.TableView.TableView.ShowExportOptions":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableView");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "ShowExportOptions", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_TableView_ShowExportOptions;
                xamlMember.Setter = set_21_TableView_ShowExportOptions;
                break;
            case "WinUI.TableView.TableView.IsReadOnly":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableView");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "IsReadOnly", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_TableView_IsReadOnly;
                xamlMember.Setter = set_22_TableView_IsReadOnly;
                break;
            case "WinUI.TableView.TableView.ShowOptionsButton":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableView");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "ShowOptionsButton", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_TableView_ShowOptionsButton;
                xamlMember.Setter = set_23_TableView_ShowOptionsButton;
                break;
            case "WinUI.TableView.TableView.CanResizeColumns":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableView");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "CanResizeColumns", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_TableView_CanResizeColumns;
                xamlMember.Setter = set_24_TableView_CanResizeColumns;
                break;
            case "WinUI.TableView.TableView.CanSortColumns":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableView");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "CanSortColumns", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_TableView_CanSortColumns;
                xamlMember.Setter = set_25_TableView_CanSortColumns;
                break;
            case "WinUI.TableView.TableView.CanFilterColumns":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableView");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "CanFilterColumns", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_TableView_CanFilterColumns;
                xamlMember.Setter = set_26_TableView_CanFilterColumns;
                break;
            case "WinUI.TableView.TableView.MinColumnWidth":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableView");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "MinColumnWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_TableView_MinColumnWidth;
                xamlMember.Setter = set_27_TableView_MinColumnWidth;
                break;
            case "WinUI.TableView.TableView.MaxColumnWidth":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableView");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "MaxColumnWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_TableView_MaxColumnWidth;
                xamlMember.Setter = set_28_TableView_MaxColumnWidth;
                break;
            case "WinUI.TableView.TableView.SelectionUnit":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableView");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "SelectionUnit", "WinUI.TableView.TableViewSelectionUnit");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_TableView_SelectionUnit;
                xamlMember.Setter = set_29_TableView_SelectionUnit;
                break;
            case "WinUI.TableView.TableViewBoundColumn.Binding":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableViewBoundColumn");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "Binding", "Microsoft.UI.Xaml.Data.Binding");
                xamlMember.Getter = get_30_TableViewBoundColumn_Binding;
                xamlMember.Setter = set_30_TableViewBoundColumn_Binding;
                break;
            case "WinUI.TableView.TableViewBoundColumn.CanSort":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableViewBoundColumn");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "CanSort", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_TableViewBoundColumn_CanSort;
                xamlMember.Setter = set_31_TableViewBoundColumn_CanSort;
                break;
            case "WinUI.TableView.TableViewBoundColumn.CanFilter":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUI.TableView.TableViewBoundColumn");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "CanFilter", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_TableViewBoundColumn_CanFilter;
                xamlMember.Setter = set_32_TableViewBoundColumn_CanFilter;
                break;
            case "kju.MainWindow.Cues":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("kju.MainWindow");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "Cues", "System.Collections.ObjectModel.ObservableCollection`1<kju.AudioCue>");
                xamlMember.Getter = get_33_MainWindow_Cues;
                xamlMember.SetIsReadOnly();
                break;
            case "kju.AudioCue.CueNumber":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("kju.AudioCue");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "CueNumber", "Int32");
                xamlMember.Getter = get_34_AudioCue_CueNumber;
                xamlMember.Setter = set_34_AudioCue_CueNumber;
                break;
            case "kju.AudioCue.Type":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("kju.AudioCue");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "Type", "String");
                xamlMember.Getter = get_35_AudioCue_Type;
                xamlMember.Setter = set_35_AudioCue_Type;
                break;
            case "kju.AudioCue.Name":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("kju.AudioCue");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "Name", "String");
                xamlMember.Getter = get_36_AudioCue_Name;
                xamlMember.Setter = set_36_AudioCue_Name;
                break;
            case "kju.AudioCue.FilePath":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("kju.AudioCue");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "FilePath", "String");
                xamlMember.Getter = get_37_AudioCue_FilePath;
                xamlMember.Setter = set_37_AudioCue_FilePath;
                break;
            case "kju.AudioCue.Duration":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("kju.AudioCue");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "Duration", "Double");
                xamlMember.Getter = get_38_AudioCue_Duration;
                xamlMember.Setter = set_38_AudioCue_Duration;
                break;
            case "kju.MainWindow.AppSettings":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("kju.MainWindow");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "AppSettings", "kju.ApplicationSettings");
                xamlMember.Getter = get_39_MainWindow_AppSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Children":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "Children", "System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>");
                xamlMember.Getter = get_40_TreeViewNode_Children;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Content":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "Content", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_TreeViewNode_Content;
                xamlMember.Setter = set_41_TreeViewNode_Content;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Depth":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "Depth", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_TreeViewNode_Depth;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.HasChildren":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "HasChildren", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_TreeViewNode_HasChildren;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.HasUnrealizedChildren":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "HasUnrealizedChildren", "Boolean");
                xamlMember.Getter = get_44_TreeViewNode_HasUnrealizedChildren;
                xamlMember.Setter = set_44_TreeViewNode_HasUnrealizedChildren;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.IsExpanded":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_TreeViewNode_IsExpanded;
                xamlMember.Setter = set_45_TreeViewNode_IsExpanded;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Parent":
                userType = (global::Kyoo.Kyoo_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::Kyoo.Kyoo_XamlTypeInfo.XamlMember(this, "Parent", "Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember.Getter = get_46_TreeViewNode_Parent;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlSystemBaseType : global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, 
            global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void StaticInitializer();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);
    internal delegate object BoxInstanceMethod(object instance);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlUserType : global::Kyoo.Kyoo_XamlTypeInfo.XamlSystemBaseType
        , global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        global::Kyoo.Kyoo_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Microsoft.UI.Xaml.Markup.IXamlType _baseType;
        global::Microsoft.UI.Xaml.Markup.IXamlType _boxedType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Kyoo.Kyoo_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, 
            global::System.Type fullType, global::Microsoft.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }
        override public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { return _boxedType; } }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            StaticInitializer();
        }

        override public object CreateFromString(string input)
        {
            if (BoxedType != null)
            {
                return BoxInstance(BoxedType.CreateFromString(input));
            }

            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                long value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    long enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt64(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return global::System.Convert.ChangeType(value, global::System.Enum.GetUnderlyingType(this.UnderlyingType));
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public StaticInitializer StaticInitializer { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }
        public BoxInstanceMethod BoxInstance {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void SetBoxedType(global::Microsoft.UI.Xaml.Markup.IXamlType boxedType)
        {
            _boxedType = boxedType;
        }

        public object BoxType<T>(object instance) where T: struct
        {
            T unwrapped = (T)instance;
            return new global::System.Nullable<T>(unwrapped);
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2411")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlMember : global::Microsoft.UI.Xaml.Markup.IXamlMember
    {
        global::Kyoo.Kyoo_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Kyoo.Kyoo_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Microsoft.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Microsoft.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

